// Migration script using prompts.json as source
const fs = require('fs');
const path = require('path');

// Helper functions
const readJsonFile = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`Error reading JSON file ${filePath}:`, error);
    process.exit(1);
  }
};

const writeFile = (filePath, content) => {
  try {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, content);
    console.log(`âœ… Wrote ${filePath}`);
  } catch (error) {
    console.error(`Error writing file ${filePath}:`, error);
    process.exit(1);
  }
};

// Main function
const main = () => {
  console.log('Starting migration from JSON...');
  
  // Paths
  const rootDir = path.join(__dirname, '..');
  const promptsFile = path.join(rootDir, 'src', 'data', 'prompts', 'prompts.json');
  const outputDir = path.join(rootDir, 'src', 'data', 'prompts');
  
  // Read prompts
  console.log(`Reading prompts from: ${promptsFile}`);
  const { prompts } = readJsonFile(promptsFile);
  console.log(`Found ${prompts.length} prompts to process`);
  
  // Categorize prompts
  const beginnerPrompts = [];
  const intermediatePrompts = [];
  const advancedPrompts = [];
  
  // Simple categorization logic (customize as needed)
  prompts.forEach((prompt, index) => {
    // Default to intermediate for now
    const basePrompt = {
      ...prompt,
      estimatedTime: '15-30 minutes',
      prerequisites: ['Basic understanding of the topic']
    };
    
    // Simple round-robin distribution for testing
    if (index % 3 === 0) {
      beginnerPrompts.push({
        ...basePrompt,
        difficulty: 'Easy',
        estimatedTime: '15 minutes'
      });
    } else if (index % 3 === 1) {
      intermediatePrompts.push({
        ...basePrompt,
        difficulty: 'Challenging',
        expectedOutcome: 'Practical application of the concept',
        followUpActions: ['Review materials', 'Practice implementation']
      });
    } else {
      advancedPrompts.push({
        ...basePrompt,
        difficulty: 'Advanced',
        expectedOutcome: 'Comprehensive solution ready for implementation',
        followUpActions: ['Review with team', 'Test in staging'],
        complexityFactors: ['Multiple components', 'Integration requirements'],
        industryContext: 'Cross-industry application'
      });
    }
  });
  
  // Write output files
  const writePromptsFile = (fileName, prompts, type) => {
    const filePath = path.join(outputDir, fileName);
    const content = `// Auto-generated by migrate-from-json.js
import { ${type} } from './types';

export const ${type.toLowerCase()}Prompts: ${type}[] = ${JSON.stringify(prompts, null, 2)};`;
    writeFile(filePath, content);
  };
  
  writePromptsFile('beginner-prompts.ts', beginnerPrompts, 'BeginnerPrompt');
  writePromptsFile('intermediate-prompts.ts', intermediatePrompts, 'IntermediatePrompt');
  writePromptsFile('advanced-prompts.ts', advancedPrompts, 'AdvancedPrompt');
  
  // Print summary
  console.log('\nMigration complete! Summary:');
  console.log('='.repeat(50));
  console.log(`Total prompts processed: ${prompts.length}`);
  console.log(`- Beginner prompts: ${beginnerPrompts.length}`);
  console.log(`- Intermediate prompts: ${intermediatePrompts.length}`);
  console.log(`- Advanced prompts: ${advancedPrompts.length}`);
  
  console.log('\nOutput files:');
  console.log(`- ${path.join(outputDir, 'beginner-prompts.ts')}`);
  console.log(`- ${path.join(outputDir, 'intermediate-prompts.ts')}`);
  console.log(`- ${path.join(outputDir, 'advanced-prompts.ts')}`);
};

// Run the script
main();
