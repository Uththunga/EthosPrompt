// Fixed migration script with better error handling and JSON parsing
const fs = require('fs');
const path = require('path');

// Helper functions
const readJsonFile = (filePath) => {
  try {
    console.log(`Attempting to read file: ${filePath}`);
    if (!fs.existsSync(filePath)) {
      throw new Error(`File not found: ${filePath}`);
    }
    const content = fs.readFileSync(filePath, 'utf-8');
    // Remove any comments from JSON
    const jsonContent = content.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '$1');
    return JSON.parse(jsonContent);
  } catch (error) {
    console.error(`‚ùå Error reading/parsing JSON file ${filePath}:`, error.message);
    console.error(error.stack);
    process.exit(1);
  }
};

const writeFile = (filePath, content) => {
  try {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Wrote ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error writing file ${filePath}:`, error.message);
    return false;
  }
};

// Main function
const main = () => {
  console.log('üöÄ Starting migration from JSON...');
  
  // Paths
  const rootDir = path.join(__dirname, '..');
  const promptsFile = path.join(rootDir, 'src', 'data', 'prompts', 'prompts.json');
  const outputDir = path.join(rootDir, 'src', 'data', 'prompts');
  
  // Validate paths
  if (!fs.existsSync(promptsFile)) {
    console.error(`‚ùå Error: Input file does not exist: ${promptsFile}`);
    console.log('Current working directory:', process.cwd());
    console.log('Resolved prompts file path:', path.resolve(promptsFile));
    process.exit(1);
  }
  
  // Read prompts
  console.log(`üìñ Reading prompts from: ${promptsFile}`);
  let promptsData;
  try {
    promptsData = readJsonFile(promptsFile);
    if (!promptsData.prompts || !Array.isArray(promptsData.prompts)) {
      throw new Error('Invalid format: expected { "prompts": [...] }');
    }
    console.log(`‚úÖ Found ${promptsData.prompts.length} prompts`);
  } catch (error) {
    console.error('‚ùå Failed to process prompts:', error.message);
    process.exit(1);
  }
  
  // Categorize prompts
  console.log('\nüìä Categorizing prompts...');
  const beginnerPrompts = [];
  const intermediatePrompts = [];
  const advancedPrompts = [];
  
  // Simple categorization logic (customize as needed)
  promptsData.prompts.forEach((prompt, index) => {
    const basePrompt = {
      ...prompt,
      estimatedTime: '15-30 minutes',
      prerequisites: ['Basic understanding of the topic'],
      createdAt: new Date().toISOString()
    };
    
    // Simple round-robin distribution for testing
    if (index % 3 === 0) {
      beginnerPrompts.push({
        ...basePrompt,
        difficulty: 'Beginner',
        estimatedTime: '15-20 minutes',
        expectedOutcome: 'Basic understanding of the concept',
        followUpActions: ['Review notes', 'Try a simple example']
      });
    } else if (index % 3 === 1) {
      intermediatePrompts.push({
        ...basePrompt,
        difficulty: 'Intermediate',
        estimatedTime: '20-30 minutes',
        expectedOutcome: 'Practical application of the concept',
        followUpActions: ['Review materials', 'Practice implementation'],
        complexityFactors: ['Basic integration']
      });
    } else {
      advancedPrompts.push({
        ...basePrompt,
        difficulty: 'Advanced',
        estimatedTime: '30-45 minutes',
        expectedOutcome: 'Comprehensive solution ready for implementation',
        followUpActions: ['Review with team', 'Test in staging'],
        complexityFactors: ['Multiple components', 'Integration requirements'],
        industryContext: 'Cross-industry application'
      });
    }
  });
  
  // Write output files
  const writePromptsFile = (fileName, prompts, type) => {
    const filePath = path.join(outputDir, fileName);
    const content = `// Auto-generated by migrate-prompts-fixed.js
// Generated on: ${new Date().toISOString()}

import { ${type} } from './types';

export const ${type.toLowerCase()}Prompts: ${type}[] = ${JSON.stringify(prompts, null, 2)};
`;
    
    console.log(`\nüìù Writing ${prompts.length} prompts to ${fileName}...`);
    if (writeFile(filePath, content)) {
      console.log(`‚úÖ Successfully wrote ${path.basename(filePath)}`);
    }
  };
  
  // Create output directory if it doesn't exist
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // Write the prompt files
  writePromptsFile('beginner-prompts.ts', beginnerPrompts, 'BeginnerPrompt');
  writePromptsFile('intermediate-prompts.ts', intermediatePrompts, 'IntermediatePrompt');
  writePromptsFile('advanced-prompts.ts', advancedPrompts, 'AdvancedPrompt');
  
  // Print summary
  console.log('\nüéâ Migration complete! Summary:');
  console.log('='.repeat(50));
  console.log(`Total prompts processed: ${promptsData.prompts.length}`);
  console.log(`- Beginner prompts: ${beginnerPrompts.length}`);
  console.log(`- Intermediate prompts: ${intermediatePrompts.length}`);
  console.log(`- Advanced prompts: ${advancedPrompts.length}`);
  console.log('='.repeat(50));
  console.log('\n‚úÖ All done! Check the output files in:', outputDir);
};

// Run the script
main();
